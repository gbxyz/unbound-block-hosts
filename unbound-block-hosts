#!/usr/bin/env perl
# Copyright 2013 Gavin Brown <gavin.brown@uk.com>
# This program is Free Software, you can use it and/or modify it under the same
# terms as Perl itself.
use LWP;
use HTTP::Request::Common;
use HTTP::Date;
use Getopt::Long;
use Pod::Usage;
use strict;

my $opt = {
	# addresses to resolve the hosts to:
	'address'			=> '127.0.0.1',
	'v6address'			=> '::1',

	# Return NXDOMAIN instead of A/AAAA for blocked domains.
	# Not recommended as all record types will return NXDOMAIN, including MX.
	'return_nxdomain'		=> 0,

	# url we pull from:
	'url'				=> 'http://someonewhocares.org/hosts/hosts',

	# file we write to:
	'file'				=> '/etc/unbound/local-blocking-data.conf',

	'help'				=> 0,

	# categories that aren't blocked by default:
	'shock-sites'			=> undef,
	'maybe-spy'			=> undef,

	# categories that are blocked by default:
	'hijack-sites'			=> 1,
	'spyware-sites'			=> 1,
	'malware-sites'			=> 1,
	'doubleclick-sites'		=> 1,
	'intellitxt-sites'		=> 1,
	'red-sheriff-sites'		=> 1,
	'cydoor-sites'			=> 1,
	'2o7-sites'			=> 1,
	'maybe-ads'			=> 1,
	'ad-sites'			=> 1,
	'canvass-fingerprinting-sites'	=> 1,
	'evercookies-sites'		=> 1,
	'yahoo-ad-sites'		=> 1,
	'hitbox-sites'			=> 1,
	'extreme-dm-sites'		=> 1,
	'realmedia-sites'		=> 1,
	'fastclick-sites'		=> 1,
	'belo-interactive-sites'	=> 1,
	'popup-traps'			=> 1,
	'ecard-scam-sites'		=> 1,
	'IVW-sites'			=> 1,
	'oewabox-sites'			=> 1,
	'wiki-spam-sites'		=> 1,
	'Phorm-sites'			=> 1,
	'Windows10'			=> 1,
	'local-data'			=> 1, # if you create your own custom file, make sure to enclose its contents in tags with this name
};
my @args = map { length($opt->{$_}) > 0 ? $_.'=s' : $_ } keys(%{$opt});
push(@args, 'help');
GetOptions($opt, @args);

if ($opt->{'help'}) {
	pod2usage('-verbose' => 99, '-sections' => 'SYNOPSIS|USAGE|INTEGRATING INTO UNBOUND');
	exit;
}

my $req = GET($opt->{'url'});
$req->header('If-Modified-Since' => time2str((stat($opt->{'file'}))[9])) if (-e $opt->{'file'});

my $ua = LWP::UserAgent->new;
my $res = $ua->request($req);

if ($res->is_error) {
	printf(STDERR "Error: %s\n", $res->message);
	exit(1);

} elsif (!$res->is_success) {
	if ($res->code(304)) {
		printf(STDOUT "(%s)\n", $res->message);

	} else {
		printf(STDERR "(%s)\n", $res->message);

	}
	exit;

}

if (!open(FILE, '>'.$opt->{'file'})) {
	printf(STDERR "Error: cannot open %s: %s\n", $opt->{'file'}, $!);
	exit(1);
}

my @names;
my @sections;
my $name;
my $discarded = 0;
foreach my $line (split("\n", $res->content)) {
	if ($line =~ /^\#<\/(.+?)>/) {
		pop(@sections);

	} elsif ($line =~ /^\#<(.+?)>/) {
		push(@sections, $1);

	} elsif ($line !~ /^\s*\#/ && $line !~ /^\s*$/) {
		my $section = $sections[-1];
		if (!$section) {
			$discarded++;

		} elsif ($opt->{$section}) {
			$line =~ s/\s*\#.+$//;
			(undef, $name) = split(/\s+/, $line, 2);
			push(@names, $name);
		}
	}
}

printf(STDERR "Warning: discarded %u lines that were found outside section tags\n", $discarded) if ($discarded > 0);

if ($opt->{'return_nxdomain'}) {
	map {
		printf(FILE "local-zone: \"%s\" always_nxdomain\n", $_);
	} @names;
} else {
	map {
		printf(FILE "local-data: \"%s A %s\"\n", $_, $opt->{'address'});
		printf(FILE "local-data: \"%s AAAA %s\"\n", $_, $opt->{'v6address'});
	} @names;
}

close(FILE);

exit;

__END__

=pod

=head1 NAME

unbound-block-hosts - a script to convert Dan Pollock's ad blocking hosts file
into Unbound local-data

=head1 SYNOPSIS

    unbound-block-hosts [OPTIONS]

=head1 INTRODUCTION

Dan Pollock (http://someonewhocares.org/) maintains a hosts file that can be
used by individual users to block hosts that contain advertisements, spyware,
web trackers and other unpleasant, annoying or malicious content.

This script converts this file into a format that can be loaded into the Unbound
DNS server, allowing this list to be consumed by an entire network, or by
devices (such as smart phones and tablets) which don't support a local hosts
file.

=head1 USAGE

unbound-block-hosts supports the following arguments:

=over

=item C<--address=ADDRESS>

The IP address to resolve to. This is C<127.0.0.1> by default.

=item C<--v6address=ADDRESS>

The IPv6 address to resolve to. This is C<::1> by default.

=item C<--url=URL>

The URL to retrieve. This is L<http://someonewhocares.org/hosts/hosts> by default.

=item C<--file=FILE>

The file to write. This is C</var/unbound/local-blocking-data.conf> by default.

=item C<--SECTION>

The source file contains a number of sections, which can be enabled or disabled
as required. By default, all sections are enabled except for C<shock-sites> and
C<maybe-spy>.

=back

This script will compare the modification time of the local file to that on the
remote server, and won't request the file if it hasn't been updated.

=head1 INTEGRATING INTO UNBOUND

To use the output of this file with Unbound, use the C<include> directive within
the C<server> block, like so:

	server:
		access-control: 0.0.0.0/8 allow
		include: /var/unbound/local-blocking-data.conf

=head1 COPYRIGHT

Copyright 2015 Gavin Brown <gavin.brown@uk.com>

This program is Free Software, you can use it and/or modify it under the same
terms as Perl itself.

=head1 SEE ALSO

=over

=item L<https://github.com/jodrell/unbound-block-hosts>

=item L<http://someonewhocares.org/hosts/>

=back

=cut
